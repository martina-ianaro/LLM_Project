# -*- coding: utf-8 -*-
"""Llama3.ipynb
https://huggingface.co/NousResearch/Meta-Llama-3-8B

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x-vPABZMr9DQH82zOBUaYcXqKXbfBxw_
"""

#!pip install wandb -qU

# Log in to your W&B account
import wandb
#wandb.login()
wandb.login(key="2a596940b79889cecb0b70cd92f2fd7f4f3befa3")

#!pip install -q accelerate==0.21.0 peft==0.4.0 bitsandbytes==0.40.2 transformers==4.31.0 trl==0.4.7
#!pip install evaluate torch rouge_score

import os
import torch
import evaluate
import wandb
import numpy as np
from evaluate import load
from datasets import load_dataset
from transformers import (
    AutoModelForCausalLM,
    AutoTokenizer,
    BitsAndBytesConfig,
    HfArgumentParser,
    TrainingArguments,
    pipeline,
    logging,
)
from peft import LoraConfig, PeftModel, AutoPeftModelForCausalLM
from trl import SFTTrainer
import pandas as pd
from datasets import Dataset
from google.colab import userdata

if torch.cuda.is_available():
    # Tell PyTorch to use the GPU.
    device = torch.device("cuda")
    print('There are %d GPU(s) available.' % torch.cuda.device_count())
    print('We will use the GPU:', torch.cuda.get_device_name(0))
# If not...
elif torch.backends.mps.is_available():
    device = torch.device("mps")
    print("Using the MPS device for MAC")
else:
    print('No GPU available, using the CPU instead.')
    device = torch.device("cpu")

# The model that you want to train from the Hugging Face hub
#model_name = "NousResearch/Llama-2-7b-chat-hf"

model_name = "NousResearch/Meta-Llama-3-8B"

# Fine-tuned model name
new_model = "Llama-3"

################################################################################
# QLoRA parameters
################################################################################

# LoRA attention dimension
lora_r = 64

# Alpha parameter for LoRA scaling
lora_alpha = 16

# Dropout probability for LoRA layers
lora_dropout = 0.1

################################################################################
# bitsandbytes parameters
################################################################################

# Activate 4-bit precision base model loading
use_4bit = True

# Compute dtype for 4-bit base models
bnb_4bit_compute_dtype = "float16"

# Quantization type (fp4 or nf4)
bnb_4bit_quant_type = "nf4"

# Activate nested quantization for 4-bit base models (double quantization)
use_nested_quant = False

################################################################################
# TrainingArguments parameters
################################################################################



# Number of training epochs
num_train_epochs = 2

# Enable fp16/bf16 training (set bf16 to True with an A100)
fp16 = False
bf16 = False

# Batch size per GPU for training
per_device_train_batch_size = 1 #4

# Batch size per GPU for evaluation
per_device_eval_batch_size = 1 #4

# Number of update steps to accumulate the gradients for
gradient_accumulation_steps = 1


# Enable gradient checkpointing
gradient_checkpointing = True


# Maximum gradient normal (gradient clipping)
max_grad_norm = 0.3

# Initial learning rate (AdamW optimizer)
learning_rate = 2e-4

# Weight decay to apply to all layers except bias/LayerNorm weights
weight_decay = 0.001

# Optimizer to use
optim = "paged_adamw_32bit"

# Learning rate schedule
lr_scheduler_type = "cosine"

# Number of training steps (overrides num_train_epochs)
max_steps = -1

# Ratio of steps for a linear warmup (from 0 to learning rate)
warmup_ratio = 0.03

# Group sequences into batches with same length
# Saves memory and speeds up training considerably
group_by_length = True

# Save checkpoint every X updates steps
save_steps = 0

# Log every X updates steps
logging_steps = 25

################################################################################
# SFT parameters
################################################################################

# Maximum sequence length to use
max_seq_length = None

# Pack multiple short examples in the same input sequence to increase efficiency
packing = False

# Load the entire model on the GPU 0
device_map = {"": 0}

dataset_path ="C:\Users\marty\Desktop\BISS_Cineca\data"

training_data = pd.read_csv(os.path.join(dataset_path, 'df_train.csv'), nrows=200)
test_data = pd.read_csv(os.path.join(dataset_path, 'df_test.csv'))
validation_data = pd.read_csv(os.path.join(dataset_path, 'df_val.csv'), nrows=30)

dfs = [training_data, validation_data] #, test_data]
new_dataset = []

for df in dfs:
    dataset = []
    #create column text with the concatenation of columns doc and summary
    for index, row in df.iterrows():
        dataset.append("<s>[INST] " + row['doc'] + " [/INST] " + row['summary'] + "</s>")
    new_dataset.append(dataset)

training_data = new_dataset[0]
validation_data = new_dataset[1]
#test_data = new_dataset[2]

training_dataset = Dataset.from_dict({"text": training_data})
valid_dataset = Dataset.from_dict({"text": validation_data})

# Load tokenizer and model with QLoRA configuration
compute_dtype = getattr(torch, bnb_4bit_compute_dtype)

bnb_config = BitsAndBytesConfig(
    load_in_4bit=use_4bit,
    bnb_4bit_quant_type=bnb_4bit_quant_type,
    bnb_4bit_compute_dtype=compute_dtype,
    bnb_4bit_use_double_quant=use_nested_quant,
)

# Check GPU compatibility with bfloat16
if compute_dtype == torch.float16 and use_4bit:
    major, _ = torch.cuda.get_device_capability()
    if major >= 8:
        print("=" * 80)
        print("Your GPU supports bfloat16: accelerate training with bf16=True")
        print("=" * 80)

"""#Load Model"""

# Load base model
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    quantization_config=bnb_config,
    device_map=device_map,
    torch_dtype=torch.float16,
)
model.config.use_cache = False
model.config.pretraining_tp = 1

# Load LLaMA tokenizer
tokenizer = AutoTokenizer.from_pretrained(model_name, trust_remote_code=True)
tokenizer.pad_token = tokenizer.eos_token
tokenizer.padding_side = "right" # Fix weird overflow issue with fp16 training

# Load LoRA configuration
peft_config = LoraConfig(
    lora_alpha=lora_alpha,
    lora_dropout=lora_dropout,
    r=lora_r,
    bias="none",
    task_type="CAUSAL_LM",
)

#Path to save the model
save_path = "C:\Users\marty\Desktop\BISS_Cineca\models\Llama3"

output_dir=os.path.join(save_path, "results_llama3")

# Set training parameters
training_arguments = TrainingArguments(
    output_dir=output_dir,
    num_train_epochs=num_train_epochs,
    per_device_train_batch_size=per_device_train_batch_size,
    gradient_accumulation_steps=gradient_accumulation_steps,
    optim=optim,
    save_steps=save_steps,
    logging_steps=logging_steps,
    eval_steps=logging_steps,
    learning_rate=learning_rate,
    weight_decay=weight_decay,
    fp16=fp16,
    bf16=bf16,
    max_grad_norm=max_grad_norm,
    max_steps=max_steps,
    warmup_ratio=warmup_ratio,
    group_by_length=group_by_length,
    lr_scheduler_type=lr_scheduler_type,
    #report_to="tensorboard",
    #evaluate_during_training=True,
    #do_train=True,
    do_eval=True,

)

"""#Training"""

def compute_metrics(eval_pred):
    #accuracy=evaluate.load("accuracy")
    rouge = evaluate.load("rouge")
    bleu = evaluate.load("bleu")
    meteor = evaluate.load('meteor')
    bertscore = evaluate.load("bertscore")

    logits, labels = eval_pred
    predictions = np.argmax(logits, axis=-1)
    #accuracy_results = accuracy.compute(predictions=predictions, references=labels)

    predictions_text = [tokenizer.decode(prediction, skip_special_tokens=True) for prediction in predictions]
    references_text = [tokenizer.decode(label, skip_special_tokens=True) for label in labels]

    rouge_results = rouge.compute(predictions=predictions_text, references=references_text)
    bleu_results = bleu.compute(predictions=predictions_text, references=references_text)
    meteor_results = meteor.compute(predictions=predictions_text, references=references_text)
    berts_results = bertscore.compute(predictions=predictions_text, references=references_text, lang="it")

    return {"rouge": rouge_results, "bleu": bleu_results, "meteor": meteor_results}

wandb.init(
    project="Llama3-train",
    config={
        "learning_rate": 1e-04,
        "architecture": "Llama3",
        "dataset": "ita-casehold",
    }
)

trainer = SFTTrainer(
    model=model,
    train_dataset=training_dataset,
    eval_dataset=valid_dataset,
    peft_config=peft_config,
    dataset_text_field="text",
    max_seq_length=max_seq_length,
    tokenizer=tokenizer,
    args=training_arguments,
    packing=packing,
    compute_metrics=compute_metrics
)

# Training
for epoch in range(training_arguments.num_train_epochs):
    train_result = trainer.train()
    metrics = train_result.metrics
    trainer.log_metrics("train", metrics)
    trainer.save_metrics("train", metrics)
    trainer.save_state()
    print(metrics)

    # Log della training loss su WandB
    wandb.log({"train_loss": metrics["train_loss"]})

wandb.finish()




# Salva il modello addestrato nella directory specificata
trainer.save_model(os.path.join(save_path, new_model))

# Inizializza WandB per il logging del validation loss
wandb.init(
    project="Llama3-val",
    config={
        "learning_rate": "-",
        "architecture": "Llama3",
    }
)

# Valutazione del modello
eval_result = trainer.evaluate()

# Recupera la validation loss dal risultato della valutazione
val_loss = eval_result["eval_loss"]

# Logga la validation loss su WandB
wandb.log({"val_loss": val_loss})

wandb.finish()

"""#Reload fine-tuned model"""

save_path = "C:\Users\marty\Desktop\BISS_Cineca\models\Llama3"

saved_model=os.path.join(save_path, new_model)

model = AutoPeftModelForCausalLM.from_pretrained(saved_model, device_map=device, torch_dtype=torch.bfloat16)

model = model.merge_and_unload()

output_merged_dir=os.path.join(output_dir, "final_merged_checkpoint")

os.makedirs(output_merged_dir, exist_ok=True)
#model.save_pretrained(output_merged_dir, safe_serialization=True)# save tokenizer for easy inference
tokenizer = AutoTokenizer.from_pretrained(saved_model)

"""#Test"""

def compute_metrics_test(predictions, references):

  rouge = evaluate.load("rouge")
  bleu = evaluate.load("bleu")
  meteor = evaluate.load('meteor')


  rouge_results= rouge.compute(predictions, references)
  bleu_results = bleu.compute(predictions, references)
  meteor_results = meteor.compute(predictions, references)

  return rouge_results, bleu_results, meteor_results

from transformers import pipeline
import csv

examples=100
pipe = pipeline(task='summarization', model=model, tokenizer=tokenizer, max_length=500)

prediction_path="C:\Users\marty\Desktop\BISS_Cinecaa\models\Llama3\predictions.csv"



with open(prediction_path, 'w', newline='') as file:
    writer = csv.writer(file)

    for i in range(examples):
      for index, row in test_data.iterrows():
        prompt="<s>[INST] " + row['doc'] + " [/INST] "
        result = pipe(f"<s>[INST] {prompt} [/INST]")
        writer.writerow(result[0]['summary_text'])


# Lista per memorizzare i dati letti dal file CSV
result = []

# Apri il file CSV in modalità lettura
with open(prediction_path, mode='r', newline='', encoding='utf-8') as file:
    reader = csv.reader(file)

    # Itera su ogni riga nel file CSV
    for row in reader:
        # Aggiungi la riga alla lista result
        result.append(row[0])  # Se ci sono più colonne, usa l'indice appropriato per estrarre il valore desiderato


references=[]
for i in range(examples):
  for index, row in test_data.iterrows():
    references.append(row['summary_text']+ "</s>")


rouge_results, bleu_results, meteor_results = compute_metrics_test(result, references)
print(f'Rouge: {rouge_results},Bleu: {bleu_results}, Meteor: {meteor_results}')

# Definisci il percorso del file di testo in cui salvare le metriche
metrics_path = "C:\Users\marty\Desktop\BISS_Cineca\models\Llama3\metrics.txt"

# Apre il file di testo in modalità scrittura
with open(metrics_path, "w") as file:
    # Scrive le metriche nel file di testo
    file.write(f'Rouge: {rouge_results}, Bleu: {bleu_results}, Meteor: {meteor_results}')

# Stampa un messaggio di conferma
print(f"Le metriche sono state salvate in {metrics_path}")