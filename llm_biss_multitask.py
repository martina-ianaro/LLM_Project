# -*- coding: utf-8 -*-
"""LLM_BISS_MULTITASK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KymyXBdjh9N4XfTcjyjDY0lnoZVyNUXv

Colab tutorial:

https://colab.research.google.com/github/saimeghana-y/Abstractive-Text-Summarizer/blob/main/Summarization_T5.ipynb#scrollTo=ZtNs9ytpCow2
"""

#!pip install -r /content/drive/MyDrive/ITA-CASEHOLD-main/data/requirements.txt


#!pip install -q accelerate==0.21.0 peft==0.4.0 bitsandbytes==0.40.2 transformers==4.31.0 trl==0.4.7 evaluate torch
import wandb
#wandb.login()
wandb.login(key="2a596940b79889cecb0b70cd92f2fd7f4f3befa3")

#from google.colab import drive
#drive.mount('/content/drive')

#dataset_path = '/content/drive/MyDrive/ITA-CASEHOLD-main/data' #'/content/drive/MyDrive/LLM_BISS2024/data'
#project_path = '/content/drive/MyDrive/ITA-CASEHOLD-main/data' #'/content/drive/MyDrive/LLM_BISS2024'
dataset_path ="C:\Users\marty\Desktop\BISS_Cineca\data"
save_directory = "./models"
# Create the directory if it doesn't exist
os.makedirs(save_directory, exist_ok=True)

result_dir = "result"
os.makedirs(result_dir, exist_ok=True)



"""#Import libraries"""

import os
import torch
from evaluate import load
from datasets import load_dataset
from transformers import (
    AutoModelForCausalLM,
    AutoTokenizer,
    BitsAndBytesConfig,
    HfArgumentParser,
    TrainingArguments,
    pipeline,
    logging,
    AutoModelForSeq2SeqLM,
    T5Tokenizer,
    T5ForConditionalGeneration

)
from peft import LoraConfig, PeftModel
from trl import SFTTrainer
import pandas as pd
from datasets import Dataset
#from google.colab import userdata
import numpy as np
import torch.nn.functional as F
from torch.utils.data import Dataset, DataLoader, RandomSampler, SequentialSampler
import io

#userdata.get('LLM_BISS')

if torch.cuda.is_available():
    # Tell PyTorch to use the GPU.
    device = torch.device("cuda")
    print('There are %d GPU(s) available.' % torch.cuda.device_count())
    print('We will use the GPU:', torch.cuda.get_device_name(0))
# If not...
elif torch.backends.mps.is_available():
    device = torch.device("mps")
    print("Using the MPS device for MAC")
else:
    print('No GPU available, using the CPU instead.')
    device = torch.device("cpu")

"""# Model"""

tokenizer = AutoTokenizer.from_pretrained("gsarti/it5-base")
model = AutoModelForSeq2SeqLM.from_pretrained("gsarti/it5-base")

training_data = pd.read_csv(os.path.join(dataset_path, 'df_train.csv'))
test_data = pd.read_csv(os.path.join(dataset_path, 'df_test.csv'))
validation_data = pd.read_csv(os.path.join(dataset_path, 'df_val.csv'))

training_data = training_data[['doc', 'summary']]
test_data = test_data[['doc', 'summary']]
validation_data = validation_data[['doc', 'summary']]
training_data.head()

import numpy as np
import evaluate
import nltk
import psutil

#!pip install rouge_score

nltk.download("punkt", quiet=True)
metric1 = evaluate.load("accuracy")
metric2 = evaluate.load("rouge")


def compute_metrics(eval_pred):
  logits, labels = eval_pred
  predictions = np.argmax(logits, axis = -1)

  return metric.compute(predictions=predictions, references=labels)

class CustomDataset(Dataset):

    def __init__(self, dataframe, tokenizer, source_len, summ_len):
        self.tokenizer = tokenizer
        self.data = dataframe
        self.source_len = source_len
        self.summ_len = summ_len
        self.text = self.data.summary
        self.ctext = self.data.doc

    def __len__(self):
        return len(self.text)

    def __getitem__(self, index):
        ctext = str(self.ctext[index])
        ctext = ' '.join(ctext.split())

        text = str(self.text[index])
        text = ' '.join(text.split())

        source = self.tokenizer.batch_encode_plus([ctext], max_length= self.source_len, pad_to_max_length=True,return_tensors='pt')
        target = self.tokenizer.batch_encode_plus([text], max_length= self.summ_len, pad_to_max_length=True,return_tensors='pt')

        source_ids = source['input_ids'].squeeze()
        source_mask = source['attention_mask'].squeeze()
        target_ids = target['input_ids'].squeeze()
        target_mask = target['attention_mask'].squeeze()

        return {
            'source_ids': source_ids.to(dtype=torch.long),
            'source_mask': source_mask.to(dtype=torch.long),
            'target_ids': target_ids.to(dtype=torch.long),
            'target_ids_y': target_ids.to(dtype=torch.long)
        }

def train(epoch, tokenizer, model, device, loader, optimizer):
    model.train()
    for _,data in enumerate(loader, 0):
        y = data['target_ids'].to(device, dtype = torch.long)
        y_ids = y[:, :-1].contiguous()
        labels = y[:, 1:].clone().detach()
        labels[y[:, 1:] == tokenizer.pad_token_id] = -100
        ids = data['source_ids'].to(device, dtype = torch.long)
        mask = data['source_mask'].to(device, dtype = torch.long)

        outputs = model(input_ids = ids, attention_mask = mask, decoder_input_ids=y_ids, labels=labels)
        loss = outputs[0]
        memory_usage = psutil.Process().memory_info().rss / (1024 * 1024)  # Memory usage in MB
        wandb.log({"Memory Usage (MB)": memory_usage, "train_loss": loss.item()})

        #if _%10 == 0:
            #wandb.log({"Training Loss": loss.item()})

        #if _%500==0:
        print(f'Epoch: {epoch}, Loss:  {loss.item()}')

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

def validate(epoch, tokenizer, model, device, loader):
    model.eval()
    predictions = []
    actuals = []
    with torch.no_grad():
        for _, data in enumerate(loader, 0):
            y = data['target_ids'].to(device, dtype = torch.long)
            ids = data['source_ids'].to(device, dtype = torch.long)
            mask = data['source_mask'].to(device, dtype = torch.long)

            generated_ids = model.generate(
                input_ids = ids,
                attention_mask = mask,
                max_length=150,
                num_beams=2,
                repetition_penalty=2.5,
                length_penalty=1.0,
                early_stopping=True
                )
            preds = [tokenizer.decode(g, skip_special_tokens=True, clean_up_tokenization_spaces=True) for g in generated_ids]
            target = [tokenizer.decode(t, skip_special_tokens=True, clean_up_tokenization_spaces=True)for t in y]
            if _%100==0:
                print(f'Completed {_}')

            predictions.extend(preds)
            actuals.extend(target)
    return predictions, actuals

"""# Train & Validation"""

def compute_metrics(predictions, references):
  rouge = evaluate.load("rouge")
  bleu = evaluate.load("bleu")
  meteor = evaluate.load('meteor')
  bertscore = evaluate.load("bertscore")

  rouge_results= rouge.compute(predictions, references)
  bleu_results = bleu.compute(predictions, references)
  meteor_results = meteor.compute(predictions, references)
  berts_results = bertscore.compute(predictions, references, lang="it")

  return rouge_results, bleu_results, meteor_results, berts_results

def main():
    config = {}          # Inizializza la configurazione
    config['TRAIN_BATCH_SIZE'] = 2    # dimensione del batch di input per l'addestramento (predefinita: 64)
    config['VALID_BATCH_SIZE'] = 2    # dimensione del batch di input per i test (predefinita: 1000)
    config['TRAIN_EPOCHS'] = 2       # numero di epoche per l'addestramento (predefinito: 10)
    config['VAL_EPOCHS'] = 1
    config['LEARNING_RATE'] = 1e-4    # tasso di apprendimento (predefinito: 0.01)
    config['SEED'] = 42               # seme casuale (predefinito: 42)
    config['MAX_LEN'] = 512
    config['SUMMARY_LEN'] = 150

    # Imposta i semi casuali e deterministici di PyTorch per la riproducibilit√†
    torch.manual_seed(config['SEED']) # seme casuale di PyTorch
    np.random.seed(config['SEED']) # seme casuale di numpy
    torch.backends.cudnn.deterministic = True

    # tokenzier for encoding the text
    tokenizer = AutoTokenizer.from_pretrained("gsarti/it5-base")

    #df = pd.read_csv(io.BytesIO(uploaded['news_summary.csv']),encoding='latin-1')

    #df = train_ds[['doc','summary']]
    training_data.doc = 'summarize: ' + training_data.doc
    validation_data.doc = 'summarize: ' + validation_data.doc
    print(training_data.head())

    training_set = CustomDataset(training_data, tokenizer, config['MAX_LEN'], config['SUMMARY_LEN'])
    val_set = CustomDataset(validation_data, tokenizer, config['MAX_LEN'], config['SUMMARY_LEN'])

    train_params = {
        'batch_size': config['TRAIN_BATCH_SIZE'],
        'shuffle': True,
        'num_workers': 0,

        }

    val_params = {
        'batch_size': config['VALID_BATCH_SIZE'],
        'shuffle': False,
        'num_workers': 0
        }
    training_loader = DataLoader(training_set, **train_params)
    val_loader = DataLoader(val_set, **val_params)

    model = T5ForConditionalGeneration.from_pretrained("gsarti/it5-base", device_map={"": 0})
    #model = model.to(device)

    optimizer = torch.optim.Adam(params =  model.parameters(), lr=config['LEARNING_RATE'])

    #wandb.watch(model, log="all")
    wandb.init(
        project="T5-train",
        config={
            "learning_rate": 1e-04,
            "architecture": "T5",
            "dataset": "ita-casehold",
        }
    )

    print('Initiating Fine-Tuning for the model on our dataset')

    for epoch in range(config['TRAIN_EPOCHS']):
        train(epoch, tokenizer, model, device, training_loader, optimizer)


    wandb.finish()
    #save fine-tuned model T5
    model_save_path = os.path.join(save_directory, "T5")

    model.save_pretrained(model_save_path)
    print(f"Fine-tuned model saved at: {model_save_path}")


    #upload model fine-tuned
    fine_tuned_model = T5ForConditionalGeneration.from_pretrained(model_save_path)

    wandb.init(
        project="T5-val",
        config={
            "learning_rate": 1e-04,
            "architecture": "T5",
        }
    )

    print('Now generating summaries on our fine tuned model for the validation dataset and saving it in a dataframe')
    val_loss = 0
    for epoch in range(config['VAL_EPOCHS']):
        predictions, actuals, loss = validate(epoch, tokenizer, fine_tuned_model, device, val_loader)
        final_df = pd.DataFrame({'Generated Text': predictions, 'Actual Text': actuals})

        rouge_results, bleu_results, meteor_results, berts_results = compute_metrics(predictions, actuals)
        print(f'Rouge: {rouge_results} Bleu: {bleu_results} Meteor: {meteor_results}  BertScore: {berts_results}')

        print('Output Files generated for review')
        
        val_loss += loss.item()
        wandb.log({"val_loss": loss.item()})

        final_df.head()

    wandb.finish()


if __name__ == '__main__':
    main()

"""# Test

"""